#!/bin/sh /etc/rc.common

# adblock-lean blocks ads using the highly popular oisd dnsmasq file and
# offers a leaner solution to adblocking than the existing alternatives on OpenWrt

# Project homepage: https://github.com/lynxthecat/adblock-lean

# Authors: @Lynx and @Wizballs (OpenWrt forum)

PREFIX=/root/adblock-lean

export PATH=/usr/sbin:/usr/bin:/sbin:/bin
export HOME=/root

START=99
STOP=4

EXTRA_COMMANDS="status pause resume gen_stats gen_config"
EXTRA_HELP="	
adblock-lean custom commands:
	status		check dnsmasq and good line count of existing blocklist
	pause		pause adblock-lean
	resume		resume adblock-lean
	gen_stats	generate dnsmasq stats for system log
	gen_config	generate default config"

log_msg()
{
	local msg="${1}"
	[[ -t 1 ]] && printf "${msg}\n"
	logger -t adblock-lean "${msg}"
}

log_failure()
{
	log_msg "${1}"
	if [[ -n "${report_failure}" ]]
	then
		failure_msg="${1}"
		eval "${report_failure}"
	fi
}

log_success()
{
	log_msg "${1}"
	if [[ -n "${report_success}" ]]
	then
		success_msg="${1}"
		eval "${report_success}"
	fi
}

load_config()
{
	mkdir -p "${PREFIX}"

	if [[ -f "${PREFIX}/config" ]]
	then
		. "${PREFIX}/config"
	else
		log_msg "ERROR: no config file identified at: ${PREFIX}/config."
		log_msg "Generate default config using 'service adblock-lean gen_config'."
		exit
	fi
}

gen_config()
{
	log_msg "Generating new default config for adblock-lean."

	mkdir -p "${PREFIX}"

	cat > "${PREFIX}/config.tmp" <<-EOT
	# adblock-lean configuration options

	# One or more dnsmasq blocklist urls separated by spaces
	blocklist_urls="https://raw.githubusercontent.com/hagezi/dns-blocklists/main/dnsmasq/pro.txt"

	# Path to optional local allowlist/blocklist files in the form:
	# site1.com
	# site2.com
	local_allowlist_path="${PREFIX}/allowlist"
	local_blocklist_path="${PREFIX}/blocklist"

	# Maximum size of any individual downloaded blocklist part
	max_blocklist_file_part_size_KB=20000
	# Minimimum size of any individual downloaded blocklist part
	min_blocklist_file_part_size_KB=100
	# Maximum total size of combined, preprocessed blocklist
	max_blocklist_file_size_KB=30000
	# Minimum number of good lines in final postprocessed blocklist
	min_good_line_count=100000

	# Remove duplicates:
	# DEFAULT - only remove duplicates if multiple blocklist urls are specified
	# ALWAYS  - always remove duplicates
	# NEVER   - never remove duplicates
	remove_duplicates="DEFAULT"

	# Rogue element action:
	# SKIP_PARTIAL - skip failed blocklist file part and continue blocklist generation
	# STOP - stop blocklist generation (and fallback to previous blocklist if available)
	# IGNORE - ignore any rogue elements (warning: may admit nefarious entries)
	rogue_element_action="SKIP_PARTIAL"

	# Download failed action:
	# SKIP_PARTIAL - skip failed blocklist file part and continue blocklist generation
	# STOP - stop blocklist generation (and fallback to previous blocklist if available)
	download_failed_action="SKIP_PARTIAL"

	# The following shell variables are invoked using:
	# 'eval \${report_failure}' and 'eval \${report_success}'
	# thereby to facilitate sending e.g. mailsend/sms notifications
	# The variables '\${failure_msg}' and '\${success_msg}' can be employed
	report_failure="" 	 
	report_success=""	
	
	EOT
	
	if [[ -f "${PREFIX}/config" ]]
	then
		log_msg "WARNING: config file ${PREFIX}/config already exists."
		log_msg "Saving new config file as: '${PREFIX}/config.new'."
		mv "${PREFIX}/config.tmp" "${PREFIX}/config.new"
	else
		log_msg "Saving new config file as: '${PREFIX}/config'."
		mv "${PREFIX}/config.tmp" "${PREFIX}/config"
	fi
}

generate_preprocessed_blocklist_file()
{
	
	> /tmp/blocklist

	if [[ -f "${local_blocklist_path}" ]] 
	then
		local_blocklist_line_count=$(grep -vEc '^\s*$|^#' "${local_blocklist_path}")
		log_msg "Found local blocklist with ${local_blocklist_line_count} line(s)."
		sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d; s~.*~local=/&/~; $a\' "${local_blocklist_path}" >> /tmp/blocklist
	else
		log_msg "No local blocklist identified."
	fi

	[[ -n "${blocklist_urls}" ]] && log_msg "Downloading new blocklist file part(s)."

	blocklist_id=0
	for blocklist_url in ${blocklist_urls}
	do
		for retries in $(seq 1 3)
		do
			log_msg "Downloading new blocklist file part from: ${blocklist_url}."
			uclient-fetch "${blocklist_url}" -O- --timeout=2 2> /tmp/uclient-fetch_err | head -c "${max_blocklist_file_part_size_KB}k" > "/tmp/blocklist.${blocklist_id}"
			if grep -q "Download completed" /tmp/uclient-fetch_err
			then
				blocklist_file_part_size_KB=$(du -bk /tmp/blocklist.${blocklist_id} | awk '{print $1}')
				if [[ "${blocklist_file_part_size_KB}" -gt "${min_blocklist_file_part_size_KB}" ]]
				then
					log_msg "Download of new blocklist file part from: ${blocklist_url} suceeded (downloaded file size: ${blocklist_file_part_size_KB} KB)."

					if [[ "${rogue_element_action}" != "IGNORE" ]] 
					then
						log_msg "Checking for any rogue elements."

						# Get line number and match of any rogue elements
						rogue_element=$(sed -nE '\~(^(local|server|address)=/)[[:alnum:]][[:alnum:].-]+(/$)|^#|^\s*$~d;{p;=;q}' /tmp/blocklist.${blocklist_id} | { read match; read line; [[ ! -z "${match}" ]] && echo "${line}: ${match}"; })

						if [[ ! -z "${rogue_element}" ]]
						then
							log_msg "Rogue element: '${rogue_element}' identified in blocklist file part from: ${blocklist_url}."
							if [[ "${rogue_element_action}" == "STOP" ]]
							then
								return 1
							fi
						fi
					fi
					log_msg "Cleaning whitespace and formatting blocklist file part as local=/.../."
					# '$a\' adds newline at end of file part
					sed 's/#$//; s/^[ \t]*//; s/[ \t]*$//; /^$/d; s/\(^address\|^server\)/local/; $a\' /tmp/blocklist.${blocklist_id} >> /tmp/blocklist
					rm -f "/tmp/blocklist.${blocklist_id}"
					blocklist_id=$((blocklist_id+1))
					continue 2
				else
					log_msg "Downloaded blocklist file part size: ${blocklist_file_part_size_KB} KB less than configured minimum: ${min_blocklist_file_part_size_KB} KB"
				fi
			else
				log_msg "Download of new blocklist file part from: ${blocklist_url} failed."
				if [[ -f "/tmp/blocklist.${blocklist_id}" ]]
				then
					blocklist_file_part_size_KB=$(du -bk /tmp/blocklist.${blocklist_id} | awk '{print $1}')
					if [[ "${blocklist_file_part_size_KB}" -eq "${max_blocklist_file_part_size_KB}" ]]
					then
						log_msg "Downloaded blocklist file part size exceeded the maximum value set in config (${max_blocklist_file_part_size_KB} KB)."
						log_msg "Consider either increasing this value in the config or removing the correasponding blocklist url."
						return 1
					fi
				fi
			fi
			log_msg "Sleeping for 5 seconds after failed download attempt."
			sleep 5
		done
		if [[ "${download_failed_action}" == "STOP" ]]
		then
			log_msg "Exiting after three failed download attempts."
			return 1
		else
			log_msg "Skipping file part and continuing after three failed download attempts."
		fi
	done

	rm -f /tmp/uclient-fetch_err

	preprocessed_blocklist_line_count=$(grep -vEc '^\s*$|^#' /tmp/blocklist)
	[[ "${preprocessed_blocklist_line_count}" -gt 0 ]] || return 1

	return 0
}

process_and_check_blocklist_file()
{
	log_msg "Processing and checking new blocklist file."

	blocklist_file_size_KB=$(du -bk /tmp/blocklist | awk '{print $1}')

	if [[ "${blocklist_file_size_KB}" -gt "${max_blocklist_file_size_KB}" ]]
	then
		log_msg "New blocklist file size: ${blocklist_file_size_KB} KB too large."
		return 1
	fi

	log_msg "Preprocessed blocklist file size: ${blocklist_file_size_KB} KB."

	if [[ "${remove_duplicates}" == "NEVER" ]]
	then
		log_msg "Skipping removal of duplicates (disabled in config)."
	else
		if [[ "${remove_duplicates}" == "DEFAULT" ]] && [[ "$(echo ${blocklist_urls} | wc -w)" -eq 1 ]]
		then
			log_msg "Skippping removal of duplicates (only one blocklist URL specified)."
		else
			log_msg "Removing duplicates from blocklist file."
			echo "$(sort -u /tmp/blocklist)" > /tmp/blocklist
			log_msg "Duplicates removed."
		fi
	fi

	if [[ -f "${local_allowlist_path}" ]] && local_allowlist_line_count=$(grep -vEc '^\s*$|^#' ${local_allowlist_path}) && [[ $local_allowlist_line_count -gt 0 ]]
	then
		log_msg "Found local allowlist with ${local_allowlist_line_count} lines.  Removing (sub)domain matches from blocklist."
		sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d' ${local_allowlist_path} > /tmp/allowlist
		awk -F'/' 'NR==FNR { allow[$0]; next } { n=split($2,arr,"."); addr = arr[n]; for ( i=n-1; i>=1; i-- ) { addr = arr[i] "." addr; if ( addr in allow ) next } } 1' "/tmp/allowlist" "/tmp/blocklist" > "/tmp/blocklist.tmp"
		rm /tmp/allowlist
		mv /tmp/blocklist.tmp /tmp/blocklist
		log_msg "Removal of allowlist (sub)domain matches from blocklist complete."
	else
		log_msg "No local allowlist identified."
	fi

	good_line_count=$(grep -vEc '^\s*$|^#' /tmp/blocklist)

	if [[ "${good_line_count}" -lt "${min_good_line_count}" ]]
	then
		log_msg "Good line count: ${good_line_count} below ${min_good_line_count}."
		return 1
	fi

	blocklist_file_size_KB=$(du -bk /tmp/blocklist | awk '{print $1}')
	log_msg "Processed blocklist file size: ${blocklist_file_size_KB} KB."

	log_msg "Performing dnsmasq --test on the processed blocklist."

	dnsmasq_test_output=$(dnsmasq --test --conf-file=/tmp/blocklist 2>&1)
	
	dnsmasq_test_result=${?}

	log_msg "dnsmasq --test output: ${dnsmasq_test_output}"

	if [[ ${dnsmasq_test_result} == 0 ]] 
	then
		log_msg "The dnsmasq --test on the processed blocklist passed."
	else
		log_msg "The dnsmasq --test on the processed blocklist failed."
		return 1
	fi

	return 0
}

check_dnsmasq()
{
	log_msg "Checking dnsmasq instance."

	if ! pgrep -x dnsmasq &> /dev/null
	then
		log_msg "No instance of dnsmasq detected with new blocklist."
		return 1
	fi

	for domain in google.com amazon.com microsoft.com
	do
		if ! nslookup "${domain}" 127.0.0.1 &> /dev/null 
		then
			log_msg "Lookup of '${domain}' failed with new blocklist."
			return 1
		elif nslookup "${domain}" 127.0.0.1 | grep -A1 ^Name | grep -q '^Address: *0\.0\.0\.0$'
		then
			log_msg "Lookup of '${domain}' resulted in 0.0.0.0 with new blocklist."
			return 1
		fi
	done
	
	return 0
}

restart_dnsmasq()
{
	log_msg "Restarting dnsmasq."

	/etc/init.d/dnsmasq restart &> /dev/null
	
	for i in $(seq 1 60)
	do
		nslookup localhost 127.0.0.1 &> /dev/null && break
		sleep 1;
	done

	log_msg "Restart of dnsmasq completed."
}

start() 
{

	log_msg "Started adblock-lean."

	if [[ "${RANDOM_DELAY}" == "1" ]]
	then
		random_delay_mins=$(($(hexdump -n 1 -e '"%u"' </dev/urandom)%60))
		log_msg "Delaying download by ${random_delay_mins} minutes (thundering herd prevention)."
		sleep "${random_delay_mins}m"
	fi

	if generate_preprocessed_blocklist_file
	then
		log_msg "Successfully generated preprocessed blocklist file with ${preprocessed_blocklist_line_count} line(s)."
	else
		log_failure "Failed to generate preprocessed blocklist file with at least one line."
		rm -f /tmp/uclient-fetch_err /tmp/blocklist*
		exit
	fi

	if process_and_check_blocklist_file
	then
		log_msg "New blocklist file check passed."
	else
		log_failure "New blocklist file check failed."
		rm -f /tmp/blocklist
		exit
	fi

	if [[ -f /tmp/dnsmasq.d/blocklist ]]
	then
		gzip -c /tmp/dnsmasq.d/blocklist > /tmp/prev_blocklist.gz
	fi

	mv /tmp/blocklist /tmp/dnsmasq.d/blocklist

	restart_dnsmasq

	if check_dnsmasq
	then
		log_msg "The dnsmasq check passed with new blocklist file."
		log_success "New blocklist installed with good line count: ${good_line_count}."
		[[ -f /tmp/prev_blocklist.gz ]] && rm /tmp/prev_blocklist.gz
	else	
		log_failure "The dnsmasq check failed with new blocklist file."

		rm /tmp/dnsmasq.d/blocklist

		if [[ -f /tmp/prev_blocklist.gz ]]
		then
			log_msg "Found previous blocklist file. Attempting to recover."
			gunzip -c /tmp/prev_blocklist.gz > /tmp/dnsmasq.d/blocklist
			rm /tmp/prev_blocklist.gz

			restart_dnsmasq

			if check_dnsmasq
			then
				log_msg "Previous blocklist recovered and dnsmasq check passed."
			else
				log_msg "The dnsmasq check failed with previous blocklist file. Stopping adblock-lean."
				stop
			fi
		else
			log_msg "No previous blocklist file found. Stopping adblock-lean."
			stop
		fi
		
	fi
}

stop()
{
	log_msg "Stopping adblock-lean." 
	log_msg "Removing /tmp/dnsmasq.d/blocklist and restarting dnsmasq."
	[[ -f /tmp/dnsmasq.d/blocklist ]] && rm /tmp/dnsmasq.d/blocklist
	/etc/init.d/dnsmasq restart &> /dev/null
	log_msg "Stopped adblock-lean."
}

gen_stats()
{
	log_msg "Generating dnsmasq stats."
	kill -USR1 $(pgrep dnsmasq)
	log_msg "dnsmasq stats available for reading using 'logread'."
}

status()
{
	if ! [[ -f /tmp/dnsmasq.d/blocklist ]]
	then
		log_msg "No /tmp/dnsmasq.d/blocklist identified."
		log_msg "adblock-lean is not active."
		return
	fi
	if check_dnsmasq
	then
		good_line_count=$(grep -vEc '^\s*$|^#' /tmp/dnsmasq.d/blocklist)
		log_msg "The dnsmasq check passed and the presently installed blocklist has good line count: ${good_line_count}."
		log_msg "adblock-lean appears to be active."
		gen_stats
	else
		log_msg "The dnsmasq check failed with existing blocklist file."
	fi
}

pause()
{
	log_msg "Received pause request."
	if [[ -f /tmp/dnsmasq.d/blocklist ]]
	then
		log_msg "Saving /tmp/dnsmasq.d/blocklist as /tmp/blocklist.gz."
		gzip -c /tmp/dnsmasq.d/blocklist > /tmp/blocklist.gz
		rm /tmp/dnsmasq.d/blocklist
		restart_dnsmasq
		log_msg "adblock-lean is now paused."
	else
		log_msg "No active /tmp/dnsmasq.d/blocklist identified."
	fi
}

resume()
{
	log_msg "Received resume request."
	if [[ -f /tmp/blocklist.gz ]]
	then
		log_msg "Restoring saved /tmp/blocklist.gz to /tmp/dnsmasq.d/blocklist"
		gunzip -c /tmp/blocklist.gz > /tmp/dnsmasq.d/blocklist
		rm /tmp/blocklist.gz
		restart_dnsmasq
		log_msg "adblock-lean is now active."
	else
		log_msg "No stored /tmp/blocklist.gz identified."
	fi	
}

if [[ "${action}" != "help" && "${action}" != "gen_config" ]]
then
	load_config
fi
