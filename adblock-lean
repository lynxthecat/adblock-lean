#!/bin/sh /etc/rc.common

# adblock-lean blocks ads using the highly popular oisd dnsmasq file and
# offers a leaner solution to adblocking than the existing alternatives on OpenWrt

# Project homepage: https://github.com/lynxthecat/adblock-lean

# Authors: @Lynx and @Wizballs (OpenWrt forum)

# *** CONFIGURATION OPTIONS ***

blocklist_urls="https://big.oisd.nl/dnsmasq2 https://raw.githubusercontent.com/hagezi/dns-blocklists/main/dnsmasq/pro.txt"
max_blocklist_file_part_size_KB=20000
max_blocklist_file_size_KB=25000
min_good_line_count=100000
allowlist_path="/root/allowlist"

# *** DO NOT EDIT BELOW THIS LINE ***

export PATH=/usr/sbin:/usr/bin:/sbin:/bin
export HOME=/root

START=99
STOP=4

EXTRA_COMMANDS="status pause resume"
EXTRA_HELP="	
	adblock-lean custom commands:
	status		check dnsmasq and good line count of existing blocklist
	pause		pause adblock-lean
	resume		resume adblock-lean"

log_msg()
{
	local msg="${1}"
	[[ -t 1 ]] && printf "${msg}\n"
	logger -t adblock-lean "${msg}"
}

process_and_check_blocklist_file()
{
	log_msg "Processing and checking new blocklist file formed from downloaded blocklist file part(s)."

	blocklist_file_size_KB=`du -bk /tmp/blocklist | awk '{print $1}'`

	if [[ "${blocklist_file_size_KB}" -gt "${max_blocklist_file_size_KB}" ]]
	then
		log_msg "New blocklist file size: ${blocklist_file_size_KB} KB too large."
		return 1
	fi

	# Clean whitespace and format all entries as local=/.../
	sed -i -e '\~^\s*$~d;s/^[ \t]*//;s/[ \t]*$//;s/^address/local/;s/^server/local/;s/#$//' /tmp/blocklist

	log_msg "Removing duplicates from downloaded blocklist file."
	awk ' { if (!seen[$0]++) print $0 > "/tmp/blocklist.tmp" } ' /tmp/blocklist
	mv /tmp/blocklist.tmp /tmp/blocklist
	log_msg "Duplicates removed."

	if [[ -f "${allowlist_path}" ]] && [[ `du "${allowlist_path}" | awk '{print $1}'` -gt 0 ]]
	then
		allowlist_line_count=`sed '/^\s*$/d' "${allowlist_path}" | wc -l`
		log_msg "Found allowlist with ${allowlist_line_count} lines."
		log_msg "Modifying blocklist based on allowlist."
		awk -F'/' 'NR==FNR { allow[$0]; next } { n=split($2,arr,"."); addr = arr[n]; for ( i=n-1; i>=1; i-- ) { addr = arr[i] "." addr; if ( addr in allow ) next } } 1' "${allowlist_path}" "/tmp/blocklist" > "/tmp/blocklist.tmp"
		mv /tmp/blocklist.tmp /tmp/blocklist
		log_msg "Blocklist modification based on allowlist complete."
	else
		log_msg "No allowlist identified."
	fi

	log_msg "Checking for any rogue elements."

	# Get line number and match of any rogue elements
	rogue_element=`sed -nE '\~(^address=/|^server=/|^local=/)[[:alnum:]][[:alnum:].-]+(/$|/#$)|^#|^\s*$~d;{p;=;q}' /tmp/blocklist | { read match; read line; [[ ! -z "${match}" ]] && echo "${line}: ${match}"; }`

	if [[ ! -z "${rogue_element}" ]]
	then
		log_msg "Rogue element: '${rogue_element}' identified in new blocklist."
		return 1
	fi

	good_line_count=`sed '\|^#|d;\|^\s*$|d' /tmp/blocklist | wc -l`

	if [[ "${good_line_count}" -lt "${min_good_line_count}" ]]
	then
		log_msg "Good line count: ${good_line_count} below ${min_good_line_count}."
		return 1
	fi

	return 0
}


check_dnsmasq()
{
	log_msg "Checking dnsmasq instance."

	pgrep -x dnsmasq &> /dev/null
	
	if [[ "${?}" -ne 0 ]]; then
		log_msg "No instance of dnsmasq detected with new blocklist."
		return 1
	fi

	for domain in google.com amazon.com microsoft.com
	do
		nslookup "${domain}" | grep -A1 ^Name | grep -q '^Address: *0\.0\.0\.0$'
		if [[ "${?}" -eq 0 ]]
		then
			log_msg "Lookup of '${domain}' resulted in 0.0.0.0 with new blocklist"
			return 1
		fi
	done
	
	return 0
}

start() 
{

	log_msg "Started adblock-lean."

	if [[ "${RANDOM_DELAY}" == "1" ]]
	then
		random_delay_mins=$(($(hexdump -n 1 -e '"%u"' </dev/urandom)%60))
		log_msg "Delaying download by ${random_delay_mins} minutes (thundering herd prevention)."
		sleep "${random_delay_mins}m"
	fi

	rm -f /tmp/blocklist

	log_msg "Downloading new blocklist file."

	blocklist_id=0
	for blocklist_url in ${blocklist_urls}
	do
		for retries in 1 2 3
		do
			wget "${blocklist_url}" -O- --timeout=2 2> /tmp/wget_err | head -c "${max_blocklist_file_part_size_KB}k" > "/tmp/blocklist.${blocklist_id}"
			if grep -q "Download completed" /tmp/wget_err
			then
				log_msg "Download of new blocklist file part from: ${blocklist_url} suceeded."
				cat "/tmp/blocklist.${blocklist_id}" >> /tmp/blocklist
				printf "\n" >> /tmp/blocklist
				rm -f "/tmp/blocklist.${blocklist_id}"
				blocklist_id=$((blocklist_id+1))
				continue 2
			else
				log_msg "Download of new blocklist file part from: ${blocklist_url} failed."
				sleep 5
			fi
		done
		log_msg "Exiting after three failed download attempts."
		rm -f /tmp/wget_err /tmp/blocklist* 
		return
	done

	rm -f /tmp/wget_err

	if process_and_check_blocklist_file
	then
		log_msg "New blocklist file check passed."
	else
		log_msg "New blocklist file check failed."
		# rm -f /tmp/blocklist
		exit
	fi

	if [[ -f /tmp/dnsmasq.d/blocklist ]]
	then
		gzip -c /tmp/dnsmasq.d/blocklist > /tmp/prev_blocklist.gz
	fi

	mv /tmp/blocklist /tmp/dnsmasq.d/blocklist

	log_msg "Restarting dnsmasq."

	/etc/init.d/dnsmasq restart &> /dev/null

	sleep 10
	
	if check_dnsmasq
	then
		log_msg "The dnsmasq check passed with new blocklist file."
		log_msg "New blocklist installed with good line count: ${good_line_count}."
		[[ -f /tmp/prev_blocklist.gz ]] && rm /tmp/prev_blocklist.gz
	else	
		log_msg "The dnsmasq check failed with new blocklist file."

		rm /tmp/dnsmasq.d/blocklist

		if [[ -f /tmp/prev_blocklist.gz ]]
		then
			log_msg "Found previous blocklist file. Attempting to recover."
			gunzip -c /tmp/prev_blocklist.gz > /tmp/dnsmasq.d/blocklist
			rm /tmp/prev_blocklist.gz

			/etc/init.d/dnsmasq restart &> /dev/null			

			if check_dnsmasq
			then
				log_msg "Previous blocklist recovered and dnsmasq check passed."
			else
				log_msg "The dnsmasq check failed with previous blocklist file. Stopping adblock-lean."
				stop
			fi
		else
			log_msg "No previous blocklist file found. Stopping adblock-lean."
			stop
		fi
		
	fi
}

stop()
{
	log_msg "Stopping adblock-lean." 
	log_msg "Removing /tmp/dnsmasq.d/blocklist and restarting dnsmasq."
	[[ -f /tmp/dnsmasq.d/blocklist ]] && rm /tmp/dnsmasq.d/blocklist
	/etc/init.d/dnsmasq restart &> /dev/null
	log_msg "Stopped adblock-lean."
}

status()
{
	if ! [[ -f /tmp/dnsmasq.d/blocklist ]]
	then
		log_msg "No /tmp/dnsmasq.d/blocklist identified."
		log_msg "adblock-lean is not active."
		return
	fi
	if check_dnsmasq
	then
		good_line_count=`sed '\|^#|d;\|^\s*$|d' /tmp/dnsmasq.d/blocklist | wc -l`
		log_msg "The dnsmasq check passed and the presently installed blocklist has good line count: ${good_line_count}."
		log_msg "adblock-lean appears to be active."
	else
		log_msg "The dnsmasq check failed with existing blocklist file."
	fi
}

pause()
{
	log_msg "Received pause request."
	if [[ -f /tmp/dnsmasq.d/blocklist ]]
	then
		log_msg "Saving /tmp/dnsmasq.d/blocklist as /tmp/blocklist.gz."
		gzip -c /tmp/dnsmasq.d/blocklist > /tmp/blocklist.gz
		rm /tmp/dnsmasq.d/blocklist
		log_msg "Restarting dnsmasq."
		/etc/init.d/dnsmasq restart &> /dev/null
		log_msg "adblock-lean is now paused."
	else
		log_msg "No active /tmp/dnsmasq.d/blocklist identified."
	fi
}

resume()
{
	log_msg "Received resume request."
	if [[ -f /tmp/blocklist.gz ]]
	then
		log_msg "Restoring saved /tmp/blocklist.gz to /tmp/dnsmasq.d/blocklist"
		gunzip -c /tmp/blocklist.gz > /tmp/dnsmasq.d/blocklist
		rm /tmp/blocklist.gz
		log_msg "Restarting dnsmasq."
		/etc/init.d/dnsmasq restart &> /dev/null
		log_msg "adblock-lean is now active."
	else
		log_msg "No stored /tmp/blocklist.gz identified."
	fi	
}
