#!/bin/sh /etc/rc.common

# adblock-lean - super simple and lightweight adblocking for OpenWrt

# Project homepage: https://github.com/lynxthecat/adblock-lean

# Authors: @Lynx and @Wizballs (OpenWrt forum)

PREFIX=/root/adblock-lean

export PATH=/usr/sbin:/usr/bin:/sbin:/bin
export HOME=/root

START=99
STOP=4

EXTRA_COMMANDS="status pause resume gen_stats gen_config"
EXTRA_HELP="	
adblock-lean custom commands:
	status		check dnsmasq and good line count of existing blocklist
	pause		pause adblock-lean
	resume		resume adblock-lean
	gen_stats	generate dnsmasq stats for system log
	gen_config	generate default config"

log_msg()
{
	local msg="${1}"
	[[ -t 1 ]] && printf "${msg}\n"
	logger -t adblock-lean "${msg}"
}

log_failure()
{
	log_msg "${1}"
	if [[ -n "${report_failure}" ]]
	then
		failure_msg="${1}"
		eval "${report_failure}"
	fi
}

log_success()
{
	log_msg "${1}"
	if [[ -n "${report_success}" ]]
	then
		success_msg="${1}"
		eval "${report_success}"
	fi
}

load_config()
{
	mkdir -p "${PREFIX}"

	if [[ -f "${PREFIX}/config" ]]
	then
		. "${PREFIX}/config"
	else
		log_msg "ERROR: no config file identified at: ${PREFIX}/config."
		log_msg "Generate default config using 'service adblock-lean gen_config'."
		exit
	fi

	if [[ \
	-z "${blocklist_urls+set}" || \
	-z "${local_allowlist_path+set}" || \
	-z "${local_blocklist_path+set}" || \
	-z "${min_blocklist_file_part_line_count+set}" || \
	-z "${max_blocklist_file_part_size_KB+set}" || \
	-z "${max_blocklist_file_size_KB+set}" || \
	-z "${min_good_line_count+set}" || \
	-z "${compress_blocklist+set}" || \
	-z "${rogue_element_action+set}" || \
	-z "${download_failed_action+set}" || \
	-z "${report_failure+set}" || \
	-z "${report_success+set}" || \
	-z "${boot_start_delay_s+set}" ]]
	then
		log_msg "ERROR: config file entry missing."
		log_msg "Generate new default config using 'service adblock-lean gen_config'."
		log_msg "A new default config will be saved to: ${PREFIX}/config.new"
		log_msg "Check differences and/or overwrite old config with the newly generated config."
		exit
	fi
}

gen_config()
{
	log_msg "Generating new default config for adblock-lean."

	mkdir -p "${PREFIX}"

	cat > "${PREFIX}/config.tmp" <<-EOT
	# adblock-lean configuration options

	# One or more dnsmasq blocklist urls separated by spaces
	blocklist_urls="https://raw.githubusercontent.com/hagezi/dns-blocklists/main/dnsmasq/pro.txt"

	# Path to optional local allowlist/blocklist files in the form:
	# site1.com
	# site2.com
	local_allowlist_path="${PREFIX}/allowlist"
	local_blocklist_path="${PREFIX}/blocklist"

	# Mininum number of lines of any individual downloaded blocklist part
	min_blocklist_file_part_line_count=1
	# Maximum size of any individual downloaded blocklist part
	max_blocklist_file_part_size_KB=20000
	# Maximum total size of combined, processed blocklist
	max_blocklist_file_size_KB=30000
	# Minimum number of good lines in final postprocessed blocklist
	min_good_line_count=100000

	# compress blocklist to save memory once blocklist has been loaded
	compress_blocklist=1 # enable (1) or disable (0) blocklist compression

	# Rogue element action:
	# SKIP_PARTIAL - skip failed blocklist file part and continue blocklist generation
	# STOP - stop blocklist generation (and fallback to previous blocklist if available)
	# IGNORE - ignore any rogue elements (warning: use with caution)
	rogue_element_action="SKIP_PARTIAL"

	# Download failed action:
	# SKIP_PARTIAL - skip failed blocklist file part and continue blocklist generation
	# STOP - stop blocklist generation (and fallback to previous blocklist if available)
	download_failed_action="SKIP_PARTIAL"

	# The following shell variables are invoked using:
	# 'eval \${report_failure}' and 'eval \${report_success}'
	# thereby to facilitate sending e.g. mailsend/sms notifications
	# The variables '\${failure_msg}' and '\${success_msg}' can be employed
	report_failure="" 	 
	report_success=""	

	# Start delay in seconds when service is started from system boot
	boot_start_delay_s=120
	
	EOT
	
	if [[ -f "${PREFIX}/config" ]]
	then
		log_msg "WARNING: config file ${PREFIX}/config already exists."
		log_msg "Saving new config file as: '${PREFIX}/config.new'."
		mv "${PREFIX}/config.tmp" "${PREFIX}/config.new"
	else
		log_msg "Saving new config file as: '${PREFIX}/config'."
		mv "${PREFIX}/config.tmp" "${PREFIX}/config"
	fi

	check_addnmount_str
}

check_addnmount_str()
{
	addnmount_str=$(uci get dhcp.@dnsmasq[0].addnmount 2> /dev/null)

	case "${addnmount_str}" in

		/bin|/bin/busybox)
			return 0
			;;
		*)
			log_msg "Unable to use compressed blocklist."
			log_msg "Either edit /etc/config/dhcp as described below or disable blocklist compression in config."
			log_msg "No appropriate 'addnmount' entry in /etc/config/dhcp was identified."
			log_msg "This is leveraged to give dnsmasq access to busybox gunzip to extract compressed blocklist."
			log_msg "Please add: \"list addnmount '/bin/busybox'\" to /etc/config/dhcp at the end of the dnsmasq section."
			log_msg "Or simply run this command: uci add_list dhcp.@dnsmasq[0].addnmount='/bin/busybox' && uci commit"
			return 1
			;;
	esac
}

generate_preprocessed_blocklist_file_parts()
{
	rm -f /tmp/blocklist*

	if [[ -f "${local_blocklist_path}" ]] 
	then
		local_blocklist_line_count=$(grep -vEc '^\s*$|^#' "${local_blocklist_path}")
		log_msg "Found local blocklist with ${local_blocklist_line_count} line(s)."
		sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d; s~.*~local=/&/~; $a\' "${local_blocklist_path}" >> /tmp/blocklist
	else
		log_msg "No local blocklist identified."
	fi
	
	if [[ "${RANDOM_DELAY}" == "1" ]]
	then
		random_delay_mins=$(($(hexdump -n 1 -e '"%u"' </dev/urandom)%60))
		log_msg "Delaying download by ${random_delay_mins} minutes (thundering herd prevention)."
		sleep "${random_delay_mins}m"
	fi


	[[ -n "${blocklist_urls}" ]] && log_msg "Downloading new blocklist file part(s)."

	preprocessed_blocklist_line_count=0
	blocklist_id=0
	for blocklist_url in ${blocklist_urls}
	do
		for retries in $(seq 1 3)
		do
			log_msg "Downloading new blocklist file part from: ${blocklist_url}."
			uclient-fetch "${blocklist_url}" -O- --timeout=2 2> /tmp/uclient-fetch_err | head -c "${max_blocklist_file_part_size_KB}k" > "/tmp/blocklist.${blocklist_id}"
			if grep -q "Download completed" /tmp/uclient-fetch_err
			then
				blocklist_file_part_size_KB=$(du -bk /tmp/blocklist.${blocklist_id} | awk '{print $1}')
				blocklist_file_part_line_count=$(grep -vEc '^\s*$|^#' /tmp/blocklist.${blocklist_id})

				if [[ "${blocklist_file_part_line_count}" -ge "${min_blocklist_file_part_line_count}" ]]
				then
					log_msg "Download of new blocklist file part from: ${blocklist_url} suceeded (downloaded file size: ${blocklist_file_part_size_KB} KB; line count: ${blocklist_file_part_line_count})."
					
					log_msg "Sanitizing blocklist file part."
					# 1 Convert to lowercase; 2 Remove trailing comments; 3 Remove trailing address hash, and all whitespace; 4 Convert to local=; 5 Add newline
					sed -i 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/; s/\([^#]\)#.*$/\1/g; s/#$//; s/^[ \t]*//; s/[ \t]*$//; /^$/d; s/\(^address=\|^server=\)/local=/; $a\' "/tmp/blocklist.${blocklist_id}"

					if [[ "${rogue_element_action}" != "IGNORE" ]] 
					then
						log_msg "Checking for any rogue elements."

						# Get line number and match of any rogue elements
						rogue_element=$(sed -nE '\~(^(local|server|address)=/)[[:alnum:]*][[:alnum:]*_.-]+(/$)|^#|^\s*$~d;{p;=;q}' /tmp/blocklist.${blocklist_id} | { read match; read line; [[ ! -z "${match}" ]] && echo "${line}: ${match}"; })

						if [[ ! -z "${rogue_element}" ]]
						then
							log_msg "Rogue element: '${rogue_element}' identified originating in blocklist file part from: ${blocklist_url}."
							if [[ "${rogue_element_action}" == "STOP" ]]
							then
								return 1
							else
								log_msg "Skipping file part and continuing."
								rm -f "/tmp/blocklist.${blocklist_id}"
								continue 2
							fi
						fi
					fi
					preprocessed_blocklist_line_count=$(( preprocessed_blocklist_line_count + blocklist_file_part_line_count ))
					gzip -f "/tmp/blocklist.${blocklist_id}"
					blocklist_id=$((blocklist_id+1))
					continue 2
				else
					log_msg "Downloaded blocklist file part line count: ${blocklist_file_part_line_count} less than configured minimum: ${min_blocklist_file_part_line_count}."
					break
				fi
			else
				log_msg "Download of new blocklist file part from: ${blocklist_url} failed."
				if [[ -f "/tmp/blocklist.${blocklist_id}" ]]
				then
					blocklist_file_part_size_KB=$(du -bk /tmp/blocklist.${blocklist_id} | awk '{print $1}')
					if [[ "${blocklist_file_part_size_KB}" -eq "${max_blocklist_file_part_size_KB}" ]]
					then
						log_msg "Downloaded blocklist file part size exceeded the maximum value set in config (${max_blocklist_file_part_size_KB} KB)."
						log_msg "Consider either increasing this value in the config or removing the correasponding blocklist url."
						break
					fi
				fi
			fi
			log_msg "Sleeping for 5 seconds after failed download attempt."
			sleep 5
		done
		if [[ "${download_failed_action}" == "STOP" ]]
		then
			log_msg "Exiting after three failed download attempts."
			return 1
		else
			log_msg "Skipping file part and continuing."
		fi
	done

	rm -f /tmp/uclient-fetch_err

	[[ "${preprocessed_blocklist_line_count}" -gt 0 ]] || return 1

	return 0
}

generate_and_process_blocklist_file()
{
 	log_msg "Removing duplicates and forming new preprocessed blocklist file."

	if [[ -f "${local_allowlist_path}" ]] && local_allowlist_line_count=$(grep -vEc '^\s*$|^#' ${local_allowlist_path}) && [[ $local_allowlist_line_count -gt 0 ]]
	then
		log_msg "Found local allowlist with ${local_allowlist_line_count} lines.  Will remove any (sub)domain matches from blocklist."
		sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d' ${local_allowlist_path} > /tmp/allowlist
		use_allowlist=1
	else
		log_msg "No local allowlist identified."
		use_allowlist=0
	fi

	for blocklist_file_part_gz in /tmp/blocklist.*.gz
	do
		if [[ "${use_allowlist}" == 1 ]]
		then
			gunzip -c "${blocklist_file_part_gz}" | awk -F'/' 'NR==FNR { allow[$0]; next } { n=split($2,arr,"."); addr = arr[n]; for ( i=n-1; i>=1; i-- ) { addr = arr[i] "." addr; if ( addr in allow ) next } } 1' "/tmp/allowlist" -
		else  
			gunzip -c "${blocklist_file_part_gz}"
		fi
		rm -f "${blocklist_file_part_gz}"
	done | sort -u > /tmp/blocklist

	rm -f /tmp/allowlist

	good_line_count=$(grep -vEc '^\s*$|^#' /tmp/blocklist)

	if [[ "${good_line_count}" -lt "${min_good_line_count}" ]]
	then
		log_msg "Good line count: ${good_line_count} below ${min_good_line_count}."
		return 1
	fi

	blocklist_file_size_KB=$(du -bk /tmp/blocklist | awk '{print $1}')
	
	if [[ "${blocklist_file_size_KB}" -gt "${max_blocklist_file_size_KB}" ]]
	then
		log_msg "New blocklist file size: ${blocklist_file_size_KB} KB too large."
		return 1
	fi

	log_msg "Processed blocklist file size: ${blocklist_file_size_KB} KB."

	log_msg "Performing dnsmasq --test on the processed blocklist."

	dnsmasq_test_output=$(dnsmasq --test --conf-file=/tmp/blocklist 2>&1)
	
	dnsmasq_test_result=${?}

	log_msg "dnsmasq --test output: ${dnsmasq_test_output}"

	if [[ ${dnsmasq_test_result} == 0 ]] 
	then
		log_msg "The dnsmasq --test on the processed blocklist passed."
	else
		log_msg "The dnsmasq --test on the processed blocklist failed."
		return 1
	fi

	return 0
}

check_dnsmasq()
{
	log_msg "Checking dnsmasq instance."

	if ! pgrep -x dnsmasq &> /dev/null
	then
		log_msg "No instance of dnsmasq detected with new blocklist."
		return 1
	fi

	for domain in google.com amazon.com microsoft.com
	do
		if ! nslookup "${domain}" 127.0.0.1 &> /dev/null 
		then
			log_msg "Lookup of '${domain}' failed with new blocklist."
			return 1
		elif nslookup "${domain}" 127.0.0.1 | grep -A1 ^Name | grep -q '^Address: *0\.0\.0\.0$'
		then
			log_msg "Lookup of '${domain}' resulted in 0.0.0.0 with new blocklist."
			return 1
		fi
	done
	
	return 0
}

restart_dnsmasq()
{
	log_msg "Restarting dnsmasq."

	/etc/init.d/dnsmasq restart &> /dev/null
	
	for i in $(seq 1 60)
	do
		nslookup localhost 127.0.0.1 &> /dev/null && break
		sleep 1;
	done

	log_msg "Restart of dnsmasq completed."
}

extract_existing_blocklist()
{
	if [[ -f /tmp/dnsmasq.d/.blocklist.gz ]]
	then
		log_msg "Extracting and saving existing compressed blocklist."
		mv /tmp/dnsmasq.d/.blocklist.gz /tmp/prev_blocklist.gz
		return 0
	elif [[ -f /tmp/dnsmasq.d/blocklist ]]
	then
		log_msg "Extracting and saving existing uncompressed blocklist."
		gzip -f /tmp/dnsmasq.d/blocklist
		mv /tmp/dnsmasq.d/blocklist.gz /tmp/prev_blocklist.gz
		return 0
	else
		log_msg "No existing compressed or uncompressed blocklist identified."
		return 1
	fi
}

restore_saved_blocklist()
{
	if [[ -f /tmp/prev_blocklist.gz ]]
	then
		log_msg "Restoring saved blocklist file."
		mv /tmp/prev_blocklist.gz /tmp/blocklist.gz
		gunzip -f /tmp/blocklist.gz
		inject_blocklist_file
		return 0
	else
		log_msg "No previous blocklist file found."
		return 1
	fi
}

clean_dnsmasq_dir()
{
	rm -f /tmp/dnsmasq.d/.blocklist.gz /tmp/dnsmasq.d/blocklist /tmp/dnsmasq.d/conf-script /tmp/dnsmasq.d/.extract_blocklist
}

inject_blocklist_file()
{
	[[ -f /tmp/blocklist ]] || return 1

	if [[ "${compress_blocklist}" == 1 ]]
	then
		clean_dnsmasq_dir
		printf "conf-script=\"sh /tmp/dnsmasq.d/.extract_blocklist\"\n" > /tmp/dnsmasq.d/conf-script
		printf "busybox gunzip -c /tmp/dnsmasq.d/.blocklist.gz\nexit 0\n" > /tmp/dnsmasq.d/.extract_blocklist
		gzip -f /tmp/blocklist
		mv /tmp/blocklist.gz /tmp/dnsmasq.d/.blocklist.gz
		injected_blocklist_file_size_KB=$(du -bk /tmp/dnsmasq.d/.blocklist.gz | awk '{print $1}')
	else
			clean_dnsmasq_dir
			mv /tmp/blocklist /tmp/dnsmasq.d/blocklist
			injected_blocklist_file_size_KB=$(du -bk /tmp/dnsmasq.d/blocklist | awk '{print $1}')
			return 0
	fi
}

boot()
{
	log_msg "Sleeping for: ${boot_start_delay_s} seconds."
	sleep "${boot_start_delay_s}"
	start "$@"
}

start() 
{

	log_msg "Started adblock-lean."

	check_addnmount_str || exit

	if extract_existing_blocklist
	then
		restart_dnsmasq
	fi

	if generate_preprocessed_blocklist_file_parts
	then
		log_msg "Successfully generated preprocessed blocklist file with ${preprocessed_blocklist_line_count} line(s)."
	else
		log_failure "Failed to generate preprocessed blocklist file with at least one line."
		restore_saved_blocklist
		rm -f /tmp/uclient-fetch_err /tmp/blocklist* /tmp/prev_blocklist.gz
		exit
	fi

	if generate_and_process_blocklist_file
	then
		log_msg "New blocklist file check passed."
	else
		log_failure "New blocklist file check failed."
		restore_saved_blocklist
		rm -f /tmp/blocklist* /tmp/prev_blocklist.gz /tmp/allowlist
		exit
	fi

	if inject_blocklist_file
	then
		log_msg "Successfully injected new blocklist file for use by dnsmasq with size: ${injected_blocklist_file_size_KB} KB."
	else
		log_failure "Failed to inject new blocklist file."
		restore_saved_blocklist
		rm -f /tmp/blocklist* /tmp/prev_blocklist.gz
		exit
	fi

	restart_dnsmasq

	if check_dnsmasq
	then
		log_msg "The dnsmasq check passed with new blocklist file."
		log_success "New blocklist installed with good line count: ${good_line_count}."
		rm -f /tmp/prev_blocklist.gz
	else	
		log_failure "The dnsmasq check failed with new blocklist file."

		if restore_saved_blocklist
		then

			restart_dnsmasq

			if check_dnsmasq
			then
				log_msg "Previous blocklist restored and dnsmasq check passed."
			else
				log_msg "The dnsmasq check failed with previous blocklist file. Stopping adblock-lean."
			stop
			fi
		fi
	fi
}

stop()
{
	log_msg "Stopping adblock-lean." 
	log_msg "Removing any adblock-lean blocklist files in /tmp/dnsmasq.d/ and restarting dnsmasq."
	clean_dnsmasq_dir
	/etc/init.d/dnsmasq restart &> /dev/null
	log_msg "Removing any leftover adblock-lean temporary files."
	rm -f /tmp/blocklist* /tmp/prev_blocklist.gz /tmp/allowlist
	log_msg "Stopped adblock-lean."
}

gen_stats()
{
	log_msg "Generating dnsmasq stats."
	kill -USR1 $(pgrep dnsmasq)
	log_msg "dnsmasq stats available for reading using 'logread'."
}

status()
{
	if ! [[ -f /tmp/dnsmasq.d/.blocklist.gz || -f /tmp/dnsmasq.d/blocklist ]]
	then
		log_msg "Blocklist in /tmp/dnsmasq.d/ not identified."
		log_msg "adblock-lean is not active."
		return
	fi
	if check_dnsmasq
	then
		if [[ -f /tmp/dnsmasq.d/.blocklist.gz ]] 
		then
			good_line_count=$(gunzip -c /tmp/dnsmasq.d/.blocklist.gz | grep -vEc '^\s*$|^#')
		elif [[ -f /tmp/dnsmasq.d/blocklist ]]
		then
			good_line_count=$(grep -vEc '^\s*$|^#' /tmp/dnsmasq.d/blocklist)
		fi
		log_msg "The dnsmasq check passed and the presently installed blocklist has good line count: ${good_line_count}."
		log_msg "adblock-lean appears to be active."
		gen_stats
	else
		log_msg "The dnsmasq check failed with existing blocklist file."
		log_msg "Considering a full reset by running service adblock stop."
	fi
}

pause()
{
	log_msg "Received pause request."
	extract_existing_blocklist
	restart_dnsmasq
	log_msg "adblock-lean is now paused."
}

resume()
{
	log_msg "Received resume request."
	restore_saved_blocklist
	restart_dnsmasq
	log_msg "adblock-lean is now resumed."
}

if [[ "${action}" != "help" && "${action}" != "gen_config" ]]
then
	load_config
fi
